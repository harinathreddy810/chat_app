app.py:

from flask import Flask, render_template, request, redirect, url_for
from flask_socketio import SocketIO, emit
from flask_login import LoginManager, UserMixin, login_user, logout_user, login_required, current_user
from werkzeug.security import generate_password_hash, check_password_hash
import sqlite3
import os
from datetime import datetime

# Initialize Flask application and configurations
app = Flask(__name__)
app.config['SECRET_KEY'] = os.urandom(24)  # Use a secure random key for session management
socketio = SocketIO(app)
login_manager = LoginManager(app)

# Database connection function
def get_db_connection():
    conn = sqlite3.connect('chat.db')
    conn.row_factory = sqlite3.Row
    return conn

# Initialize the database
def init_db():
    with get_db_connection() as conn:
        conn.execute('''
            CREATE TABLE IF NOT EXISTS users (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                username TEXT UNIQUE,
                password TEXT
            )
        ''')
        conn.execute('''
            CREATE TABLE IF NOT EXISTS messages (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                room TEXT,
                username TEXT,
                message TEXT,
                timestamp DATETIME DEFAULT CURRENT_TIMESTAMP
            )
        ''')
init_db()

# User model
class User(UserMixin):
    def __init__(self, id, username, password):
        self.id = id
        self.username = username
        self.password = password

@login_manager.user_loader
def load_user(user_id):
    conn = get_db_connection()
    user_data = conn.execute('SELECT * FROM users WHERE id = ?', (user_id,)).fetchone()
    conn.close()
    return User(user_data['id'], user_data['username'], user_data['password']) if user_data else None

# Routes
@app.route('/')
def index():
    return render_template('index.html')

@app.route('/register', methods=['GET', 'POST'])
def register():
    if request.method == 'POST':
        username = request.form['username']
        password = request.form['password']

        if not username or not password:
            return "Username and password are required", 400

        hashed_password = generate_password_hash(password)

        # Insert user into database
        conn = get_db_connection()
        try:
            conn.execute('INSERT INTO users (username, password) VALUES (?, ?)', (username, hashed_password))
            conn.commit()
        except sqlite3.IntegrityError:
            return "Username already exists", 400
        finally:
            conn.close()

        return redirect(url_for('login'))
    return render_template('register.html')

@app.route('/login', methods=['GET', 'POST'])
def login():
    if request.method == 'POST':
        username = request.form['username']
        password = request.form['password']

        conn = get_db_connection()
        user_data = conn.execute('SELECT * FROM users WHERE username = ?', (username,)).fetchone()
        conn.close()

        if user_data and check_password_hash(user_data['password'], password):
            user = User(user_data['id'], user_data['username'], user_data['password'])
            login_user(user)
            return redirect(url_for('chat'))
        else:
            return "Invalid username or password", 401
    
    return render_template('login.html')

@app.route('/chat')
@login_required
def chat():
    conn = get_db_connection()
    messages = conn.execute('SELECT * FROM messages ORDER BY timestamp DESC').fetchall()
    conn.close()
    return render_template('chat.html', username=current_user.username, messages=messages)

@app.route('/logout')
@login_required
def logout():
    logout_user()
    return redirect(url_for('login'))

# SocketIO events
@socketio.on('send_message')
def handle_send_message(data):
    message = data['message']
    username = current_user.username
    room = data['room']

    # Store message in database
    conn = get_db_connection()
    conn.execute('INSERT INTO messages (room, username, message) VALUES (?, ?, ?)', (room, username, message))
    conn.commit()
    conn.close()

    emit('receive_message', {'message': message, 'username': username, 'timestamp': datetime.now().strftime('%Y-%m-%d %H:%M:%S')}, broadcast=True)

@socketio.on('typing')
def handle_typing(data):
    emit('user_typing', {'username': current_user.username}, broadcast=True)

# Run the app
if __name__ == '__main__':
    socketio.run(app, port=5000, debug=True)


chat.html:

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Chat Room</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/4.0.1/socket.io.js"></script>
    <style>
        body {
            font-family: Arial, sans-serif;
            background-color: #f0f0f0;
            margin: 0;
            display: flex;
            flex-direction: column;
            height: 100vh;
        }

        h1 {
            background-color: #075E54;
            color: white;
            padding: 15px;
            margin: 0;
            text-align: center;
        }

        #chat {
            flex: 1;
            overflow-y: auto;
            padding: 10px;
            background-color: #e5ddd5;
            display: flex;
            flex-direction: column;
            gap: 10px;
        }

        .message {
            padding: 10px;
            border-radius: 10px;
            max-width: 70%;
            word-wrap: break-word;
            line-height: 1.5;
        }

        .message.user {
            background-color: #dcf8c6;
            align-self: flex-end;
        }

        .message.client {
            background-color: #ffffff;
            align-self: flex-start;
        }

        #message-container {
            display: flex;
            padding: 10px;
            background-color: white;
        }

        #message {
            flex: 1;
            border: 1px solid #ccc;
            border-radius: 20px;
            padding: 10px;
            margin-right: 10px;
            outline: none;
        }

        #send {
            background-color: #25D366;
            color: white;
            border: none;
            border-radius: 20px;
            padding: 10px 15px;
            cursor: pointer;
        }

        #send:hover {
            background-color: #128C7E;
        }

        #typing-indicator {
            font-style: italic;
            color: #888;
            display: none;
        }

        .timestamp {
            font-size: 0.8em;
            color: #999;
            margin-top: 5px;
        }
    </style>
</head>
<body>
    <h1>Welcome to the Chat Room, {{ username }}!</h1>
    <div id="chat">
        {% for message in messages %}
            <div class="message {{ 'user' if message.username == username else 'client' }}">
                <strong>{{ message.username }}:</strong> {{ message.message }}
                <div class="timestamp">{{ message.timestamp }}</div>
            </div>
        {% endfor %}
    </div>
    <div id="typing-indicator"></div>
    <div id="message-container">
        <input type="text" id="message" placeholder="Type your message here..." />
        <button id="send">Send</button>
    </div>
    
    <script>
        const socket = io.connect('http://' + document.domain + ':' + location.port);

        // Listen for receiving messages
        socket.on('receive_message', function(data) {
            const chat = document.getElementById('chat');
            const messageDiv = document.createElement('div');
            messageDiv.classList.add('message', data.username === '{{ username }}' ? 'user' : 'client');
            messageDiv.innerHTML = `<strong>${data.username}:</strong> ${data.message} <div class="timestamp">${data.timestamp}</div>`;
            chat.appendChild(messageDiv);
            chat.scrollTop = chat.scrollHeight; // Auto scroll to the bottom
        });

        // Listen for typing indicator
        socket.on('user_typing', function(data) {
            const typingIndicator = document.getElementById('typing-indicator');
            typingIndicator.innerText = `${data.username} is typing...`;
            typingIndicator.style.display = 'block';
            setTimeout(() => {
                typingIndicator.style.display = 'none';
            }, 2000); // Hide after 2 seconds
        });

        // Function to send message
        function sendMessage() {
            const messageInput = document.getElementById('message');
            const message = messageInput.value;

            if (message.trim() !== '') {
                socket.emit('send_message', {'message': message, 'room': 'general'}); // Adjust room as necessary

                messageInput.value = ''; // Clear input
            }
        }

        document.getElementById('send').onclick = sendMessage;

        // Emit typing event
        document.getElementById('message').addEventListener('input', function() {
            socket.emit('typing');
        });

        // Send message on Enter key press
        document.getElementById('message').addEventListener('keypress', function(event) {
            if (event.key === 'Enter') {
                sendMessage();
            }
        });
    </script>
</body>
</html>

index.html:

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Chat Application</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            background-color: #f0f0f0;
            margin: 0;
            display: flex;
            flex-direction: column;
            height: 100vh;
            justify-content: center;
            align-items: center;
        }

        h1 {
            color: #075E54;
        }

        a {
            text-decoration: none;
            color: #075E54;
            font-weight: bold;
        }
    </style>
</head>
<body>
    <h1>Welcome to the Chat Application!</h1>
    <button><a href="/login">Login</a></button> | 
    <button><a href="/register">Register</a></button>
</body>
</html>

login.html:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Login</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            background-color: #f0f0f0;
            margin: 0;
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            height: 100vh;
        }

        form {
            background: white;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
        }

        input {
            margin-bottom: 10px;
            padding: 10px;
            width: 100%;
            border: 1px solid #ccc;
            border-radius: 4px;
        }

        button {
            background-color: #075E54;
            color: white;
            border: none;
            padding: 10px;
            border-radius: 4px;
            cursor: pointer;
        }

        button:hover {
            background-color: #005b43;
        }
    </style>
</head>
<body>
    <form method="POST">
        <h2>Login</h2>
        <input type="text" name="username" placeholder="Username" required />
        <input type="password" name="password" placeholder="Password" required />
        <button type="submit">Login</button>
    </form>
    <p>Don't have an account? <a href="/register">Register here</a></p>
</body>
</html>

register.html:

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Register</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            background-color: #f0f0f0;
            margin: 0;
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            height: 100vh;
        }

        form {
            background: white;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
        }

        input {
            margin-bottom: 10px;
            padding: 10px;
            width: 100%;
            border: 1px solid #ccc;
            border-radius: 4px;
        }

        button {
            background-color: #075E54;
            color: white;
            border: none;
            padding: 10px;
            border-radius: 4px;
            cursor: pointer;
        }

        button:hover {
            background-color: #005b43;
        }
    </style>
</head>
<body>
    <form method="POST">
        <h2>Register</h2>
        <input type="text" name="username" placeholder="Username" required />
        <input type="password" name="password" placeholder="Password" required />
        <button type="submit">Register</button>
    </form>
    <p>Already have an account? <a href="/login">Login here</a></p>
</body>
</html>

